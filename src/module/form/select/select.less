@import (reference) '../../style/color';
@import (reference) '../../style/size';
@import (reference) '../../style/caret';

.kf-select-color(@color, @inverse: false) {
  & when (@inverse = false) {
    border: 1px solid @color;

    > span {
      .kf-tip-arrow(down, @color, 5px);
    }
  }

  & when (@inverse = true) {
    background-color: @color;
    input {
      color: white;
    }

    > span {
      .kf-tip-arrow(down, white, 5px);
    }
  }

  > ul {
    margin-top: 2px;
    background-color: white;

    > li[kf-selected] > div {
      background-color: @color;
      color: white;
    }

    > li:hover > div {
      background-color: @color;
      color: white;
    }
  }
}
.kf-select-size(@vpad, @hpad, @fs, @br) {
  padding: @vpad @hpad;
  font-size: @fs;
  border-radius: @br;

  > ul > li {
    padding: min(8px, @vpad);
    > div {
      padding: @vpad @hpad;
      border-radius: @br;
    }
  }
}

.select {
  position: relative;
  display: inline-block;
  padding-right: 15px !important;

  > .bg {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: 2015;
    opacity: 0;
  }

  > span {
    position: absolute;
    display: inline-block;
    top: 50%;
    right: 5px;
    transform: translateY(-50%);
  }

  > ul.visible {
    visibility: visible;
    opacity: 1;
  }

  > ul {
    position: absolute;
    width: 100%;
    z-index: 2016;
    margin: 0;
    padding: 0;
    list-style: none;
    left: 0;
    top: 100%;
    box-shadow: 2px 2px @light;
    border: 1px solid @light;
    visibility: hidden;
    opacity: 0;
    transition: opacity .2s linear, visibility .2s linear;
    color: @dark;

    li {
      &:not(:last-child) {
        padding-bottom: 0 !important;
      }
      > div {
        cursor: pointer;
      }
    }
  }
}

.define-kf-select() {
  @colorLen: length(@colors);
  .color(@i: 1) when (@i <= @colorLen) {
    @c: extract(@colors, @i);
    .kf-select.kf-@{c},
    .kf-input-group.kf-@{c} > .kf-select:not(.kf-addon) {
      .kf-select-color(@@c);
    }

    .kf-input-group.kf-@{c} > .kf-select.kf-addon {
      .kf-select-color(@@c, true);
    }

    .color(@i + 1);
  }

  @sizeLen: length(@sizes);
  .size(@i: 1) when (@i <= @sizeLen) {
    @s: extract(@sizes, @i);
    @vpad: extract(@vpads, @i);
    @hpad: extract(@hpads, @i);
    @fs: extract(@fss, @i);
    @br: extract(@brs, @i);
    .kf-select.kf-@{s},
    .kf-input-group.kf-@{s} > .kf-select {
      .kf-select-size(@@vpad, @@hpad, @@fs, @@br);
    }

    .size(@i + 1);
  }

  .color();
  .size();
}

:global {
  .define-kf-select();
}
