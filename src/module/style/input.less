@import (reference) './color';
@import (reference) './size';

.define-kf-input() {
  @colorLen: length(@colors);

  .color(@i: 1) when (@i <= @colorLen) {
    @c: extract(@colors, @i);

    .kf-input.kf-@{c} {
      border: 1px solid @@c;
    }
    .kf-input-group.kf-@{c} {
      > .kf-input {
        border: 1px solid @@c;
      }
      > .kf-addon {
        background-color: @@c;
        & when not (@c = light) {
          color: white;
        }
      }
    }

    .color(@i + 1);
  }

  @sizeLen: length(@sizes);
  .size(@i: 1) when (@i <= @sizeLen) {
    @s: extract(@sizes, @i);
    @vpad: extract(@vpads, @i);
    @hpad: extract(@hpads, @i);
    @br: extract(@brs, @i);
    @fs: extract(@fss, @i);

    .kf-input.kf-@{s} {
      padding: @@vpad @@hpad;
      font-size: @@fs;
      border-radius: @@br;
    }
    .kf-input-group.kf-@{s} {
      > .kf-input,
      > .kf-addon {
        padding: @@vpad @@hpad;
        font-size: @@fs;
      }

      > * {
        &:first-child {
          border-top-left-radius: @@br !important;
          border-bottom-left-radius: @@br !important;
        }
        &:last-child {
          border-top-right-radius: @@br !important;
          border-bottom-right-radius: @@br !important;
        }
      }
    }

    .size(@i + 1);
  }

  :global {
    .kf-input {
      display: inline-block;
    }

    .kf-input-group {
      display: table;
      table-layout: fixed;

      > * {
        display: table-cell !important;
        border-radius: 0 !important;
        white-space: nowrap;
      }
    }

    .color();
    .size();
  }
}

.define-kf-input();
