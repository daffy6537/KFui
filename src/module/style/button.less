@import (reference) './color';
@import (reference) './size';

.define-kf-btn() {
  @colorLen: length(@colors);

  .color(@i: 1) when (@i <= @colorLen) {
    @c: extract(@colors, @i);

    .kf-btn-@{c} {
      background-color: @@c;
      & when not (@c = light) {
        color: white;
      }
      &:focus {
        background-color: darken(@@c, 10%);
      }
    }

    .color(@i + 1);
  }

  .gcolor(@i: 1) when (@i <= @colorLen) {
    @c: extract(@colors, @i);
    > .kf-btn-@{c} {
      border-left: 1px solid darken(@@c, 10%);
    }

    .gcolor(@i + 1);
  }

  @sizeLen: length(@sizes);
  .size(@i: 1) when (@i <= @sizeLen) {
    @s: extract(@sizes, @i);
    @vpad: extract(@vpads, @i);
    @hpad: extract(@hpads, @i);
    @br: extract(@brs, @i);
    @fs: extract(@fss, @i);

    .kf-btn-@{s} {
      padding: @@vpad @@hpad;
      font-size: @@fs;
      border-radius: @@br;
    }

    .size(@i + 1);
  }

  .gsize(@i: 1) when (@i <= @sizeLen) {
    @s: extract(@sizes, @i);
    @br: extract(@brs, @i);

    > .kf-btn-@{s} {
      &:first-child {
        border-top-left-radius: @@br;
        border-bottom-left-radius: @@br;
      }
      &:last-child {
        border-top-right-radius: @@br;
        border-bottom-right-radius: @@br;
      }
    }

    .gsize(@i + 1);
  }

  :global {
    .kf-btn {
      display: inline-block;
      border: 1px solid transparent;
      vertical-align: middle;
      text-align: center;
      white-space: nowrap;
      line-height: 1;
    }

    .size();
    .color();
  }

  :global {
    .kf-btn-group {
      display: inline-block;
      > .kf-btn {
        border-radius: 0;
        &:first-child {
          border-left: none;
        }
      }

      .gcolor();
      .gsize();
    }
  }
}

.define-kf-btn();
